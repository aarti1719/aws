---
AWSTemplateFormatVersion: 2010-09-09
Description: "RDE API ECS Stack"
Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: The ID of the Vpc 
  SubnetIds:
    Description: The subnets to place database instances in.
    Type: List<AWS::EC2::Subnet::Id>  
  ServiceName:
    Type: String
  ClusterName:
    Type: String
  TaskName:
    Type: String
  TableName:
    Type: String
  MappingTableName:
    Type: String
  ApigeePubKey:
    Type: String
  Image:
    Type: String
Resources:
  LoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "TCP"
          FromPort: 80
          ToPort: 80
      SecurityGroupEgress:
        - CidrIp: "0.0.0.0/0"
          IpProtocol: -1
          FromPort: -1
          ToPort: -1
      GroupDescription: Access to the internal load balancer
      VpcId: !Ref 'VpcId'
      
  LoadBalancerIngressFromECS:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Accept traffic from a container in the fargate container security group
      GroupId: !Ref 'LoadBalancerSG'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'FargateContainerSecurityGroup'
      
  FargateContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the Fargate containers
      VpcId: !Ref 'VpcId'
      
  EcsSecurityGroupIngressFromALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the ALB
      GroupId: !Ref 'FargateContainerSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'LoadBalancerSG'
  EcsSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: !Ref 'FargateContainerSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'FargateContainerSecurityGroup'

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service:
            - ecs-tasks.amazonaws.com
            - ec2.amazonaws.com
      Policies:
      - PolicyName: "base_policy" 
        PolicyDocument: 
          Version: 2012-10-17
          Statement: 
          - Resource: '*' #TODO dynamodb read/write
            Effect: Allow
            Action:
            - dynamodb:*
            - logs:CreateLogStream
            - logs:PutLogEvents
          - Resource: '*' #TODO container repo read 
            Effect: Allow
            Action:
            - ecr:*
           
  TaskDefinition:
    DependsOn: TaskRole
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}
      Memory: 512
      Cpu: 256
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt TaskRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      ContainerDefinitions:
      - Name: !Ref TaskName
        Image: !Ref Image
        Environment:
        - Name: TABLE_NAME
          Value: !Ref TableName
        - Name: SSO_MAP_TABLE_NAME
          Value: !Ref MappingTableName
        # - Name: PUBLIC_KEY
        #   Value: !Ref ApigeePubKey
        Essential: true
        Memory: 512
        Cpu: 256
        PortMappings:
          - ContainerPort: 3000
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-region: !Ref AWS::Region
            awslogs-group: !Ref LogGroup
            awslogs-stream-prefix: !Ref AWS::StackName
            
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${AWS::StackName}

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ClusterName

  Service:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerListener
    Properties:
      ServiceName: !Ref ServiceName
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 2 #TODO: Review
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref FargateContainerSecurityGroup
          Subnets: !Ref SubnetIds
      LoadBalancers:
        - ContainerName: !Ref TaskName
          ContainerPort: 3000
          TargetGroupArn: !Ref TargetGroup

  
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      Subnets: !Ref SubnetIds
      SecurityGroups:
        - !Ref LoadBalancerSG

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LoadBalancer
    Properties:
      VpcId: !Ref VpcId
      Port: 3000
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: "ip"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30
  
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref LoadBalancerListener
      Priority: 1
      Conditions:
        - Field: path-pattern
          Values:
            - /
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
  
Outputs:
  LoadBalancerDNSName:
    Description: ALB DNS Name  
    Value: !GetAtt LoadBalancer.DNSName
